@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using System.Text.Json
@using IdleBattler_Common.Models.Arena
@using IdleBattler_Common.Shared
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager Navigation


@implements IDisposable

<h3>Arena</h3>

<progress id="arenaTimeRemaining" value="@_arenaTimeRemaining" max="100"></progress>
@if (_arena != null && _arena.Fighters.Count > 0)
{
    <ul>
        @foreach (var fighter in _arena.Fighters)
        {
            <li>@fighter.Fighter.Id</li>
        }
    </ul>
}
<BECanvas Width="500" Height="400" @ref="_canvasReference"></BECanvas>
<div style="border:1px solid black;">
    @if (_messages.Count > 0)
    {
        <ul>
            @foreach (var message in _messages)
            {
                <li>@message</li>
            }
        </ul>
    }
</div>

<style>
    canvas {
        border: thin solid black;
    }
</style>

@code {
    private Canvas2DContext _context;
    private double _arenaTimeRemaining = 100.0;
    private CancellationToken _token;
    private HubConnection _hubConnection;
    private ArenaModel _arena;
    private bool _hasStartedDrawing = false;

    private readonly CancellationTokenSource _tokenSource = new CancellationTokenSource();
    private readonly PeriodicTimer _timer = new(TimeSpan.FromMilliseconds(30));
    private readonly List<TreasureModel> _treasures = new List<TreasureModel>();
    private readonly List<ArenaEvent> _events = new List<ArenaEvent>();
    private readonly List<ArenaFighterModel> _fighters = new List<ArenaFighterModel>();
    private readonly List<string> _messages = new List<String>();

    protected BECanvasComponent _canvasReference;

    [Parameter]
    public Guid ArenaId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _token = _tokenSource.Token;
        await SetArenaFromId(ArenaId.ToString());

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7156/arenahub")
            .Build();

        _hubConnection.On<string>("ArenaUpdate", async (arena) =>
        {
            if (ArenaId == Guid.Parse(arena)) 
            {
                await SetArenaFromId(arena);
            }
        });

        _hubConnection.On<string>("ArenaStartBattle", async (arena) =>
        {
            if (ArenaId == Guid.Parse(arena))
            {
                await GetArenaEvents(_arena.Id);
            }
        });

        _hubConnection.On<string, string>("EventsUpdate", async (arena, events) =>
        {
            if (ArenaId == Guid.Parse(arena))
            {
                _events.AddRange(JsonSerializer.Deserialize<List<ArenaEvent>>(events));
                if (!_hasStartedDrawing)
                {
                    _hasStartedDrawing = true;
                    StartArenaDrawTimer();
                }
            }
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
    }

    public void Dispose() {
        this._context.Dispose();
        this._canvasReference = null;
        this._timer.Dispose();
        this._tokenSource.Dispose();
        this._hubConnection.DisposeAsync();
    }

    private async Task<List<ArenaEvent>> GetEventsToDraw(List<ArenaEvent> arenaEvents, List<ArenaFighterModel> activeFighters)
    {
        var eventsToDraw = new List<ArenaEvent>();
        var numberOfMovementEventsToObtain = activeFighters.Count > 0 ? activeFighters.Count : 1;
        var totalMovementEvents = 0; 

        foreach (var arenaEvent in arenaEvents)
        {
            if (arenaEvent.EventAction == EventAction.EventsNeedToContinue)
            {
                eventsToDraw.Add(arenaEvent);
                break;
            }
            if (totalMovementEvents == numberOfMovementEventsToObtain) break;

            if (arenaEvent.EventAction == EventAction.Movement || arenaEvent.EventAction == EventAction.Fight) totalMovementEvents++;

            eventsToDraw.Add(arenaEvent);
        }

        return eventsToDraw;
    }

    private async Task DrawHealthBar(double xLoc, double yLoc, double health, Canvas2DContext context)
    {
        await context.BeginPathAsync();
        var width = 40;
        await context.RectAsync(xLoc - width / 2, yLoc, width * (health / 100), 5);
        if (health > 63)
        {
            await context.SetFillStyleAsync("green");
        }
        else if (health > 37)
        {
            await context.SetFillStyleAsync("gold");
        }
        else if (health > 13)
        {
            await context.SetFillStyleAsync("orange");
        }
        else
        {
            await context.SetFillStyleAsync("red");
        }
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    private async Task DrawFighter(double xLoc, double yLoc, Canvas2DContext context) {
        await context.BeginPathAsync();
        await context.ArcAsync(xLoc, yLoc, 10, 0, Math.PI * 2);
        await context.SetFillStyleAsync("red");
        await context.FillAsync();
        await context.ClosePathAsync();
    }

    private async Task DrawAllFighters(List<ArenaFighterModel> fighters, BECanvasComponent canvas, Canvas2DContext context)
    {
        foreach (var fighter in fighters)
        {
            double xLocation = canvas.Width * (fighter.XLocation / 100.0); // Server returns a "percentage" location that we can use to draw a location based on canvas size
            double yLocation = canvas.Height * (fighter.YLocation / 100.0);
            await DrawFighter(xLocation, yLocation, context);
            await DrawHealthBar(xLocation, yLocation - 23, fighter.Fighter.Health, context);
        }
    }

    private async Task DrawTreasures(List<TreasureModel> treasures, BECanvasComponent canvas, Canvas2DContext context)
    {
        foreach (var treasure in treasures)
        {
            var xLocation = canvas.Width * (treasure.XLocation / 100.0);
            var yLocation = canvas.Height * (treasure.YLocation / 100.0);
            await context.SetFillStyleAsync("blue");
            await context.FillRectAsync(xLocation, yLocation, 10, 10);
        }
    }

    private async Task Draw(Canvas2DContext context, BECanvasComponent canvas, List<ArenaEvent> arenaEvents) {
        if (context == null || canvas == null) return;
        await context.ClearRectAsync(0, 0, canvas.Width, canvas.Height);

        foreach (var arenaEvent in arenaEvents)
        {
            if (arenaEvent.EventAction == EventAction.SpawnTreasure) 
            {
                _treasures.Add(JsonSerializer.Deserialize<TreasureModel>(arenaEvent.EventObject.ToString()));
            }
            if (arenaEvent.EventAction == EventAction.Loot)
            {
                var treasure = JsonSerializer.Deserialize<TreasureModel>(arenaEvent.EventObject.ToString());
                _treasures.Remove(_treasures.FirstOrDefault(s => s.Id == treasure.Id));
                AddArenaMessage($"{arenaEvent.ObjectId} found a {treasure?.Name}");
            }

            if (arenaEvent.EventAction == EventAction.SpawnFighter) _fighters.Add(JsonSerializer.Deserialize<ArenaFighterModel>(arenaEvent.EventObject.ToString()));
            if (arenaEvent.EventAction == EventAction.Movement || arenaEvent.EventAction == EventAction.Fight)
            {
                _fighters.Remove(_fighters.FirstOrDefault(s => s.Fighter.Id == arenaEvent.ObjectId));
                var deserializedFighter = JsonSerializer.Deserialize<ArenaFighterModel>(arenaEvent.EventObject.ToString());
                _fighters.Add(deserializedFighter);
            }
            if (arenaEvent.EventAction == EventAction.Death)
            {
                _fighters.Remove(_fighters.FirstOrDefault(s => s.Fighter.Id == arenaEvent.ObjectId));
            }
            if (arenaEvent.EventAction == EventAction.ArenaTimeUpdate) UpdateArenaTime(JsonSerializer.Deserialize<double>(arenaEvent.EventObject.ToString()));
        }

        await DrawAllFighters(_fighters, canvas, context);
        await DrawTreasures(_treasures, canvas, context);
    }

    private async Task RunOnTimer(PeriodicTimer timer, CancellationToken token, Func<Task> function) {
        try {
            while (await timer.WaitForNextTickAsync(token))
            {
                await function();
            }
        }
        catch (Exception ex) {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task<Guid> GetNewArena()
    {
        var client = new HttpClient();

        var response = await client.PostAsync($"https://localhost:7156/api/arena", null);
        if (response.StatusCode == System.Net.HttpStatusCode.OK) return JsonSerializer.Deserialize<Guid>(response.Content.ReadAsStream());

        return Guid.NewGuid();
    }

    private async Task<ArenaModel> GetArena(Guid arenaId)
    {
        var client = new HttpClient();

        var response = await client.GetStreamAsync($"https://localhost:7156/api/Arena/{arenaId.ToString()}");
        try
        {
            return JsonSerializer.Deserialize<ArenaModel>(response);
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    private async Task<List<ArenaEvent>> GetArenaEvents(Guid arenaId)
    {
        var client = new HttpClient();
        var streamTask = await client.GetStreamAsync($"https://localhost:7156/api/arena/events/{arenaId}");
        try
        {
            return JsonSerializer.Deserialize<List<ArenaEvent>>(streamTask);
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    private void UpdateArenaTime(double arenaTime)
    {
        _arenaTimeRemaining = 100 - arenaTime;
        StateHasChanged();
    }

    private async Task SetArenaFromId(string arenaId)
    {
        _arena = await GetArena(Guid.Parse(arenaId));
        StateHasChanged();
    }

    private void AddArenaMessage(string message)
    {
        _messages.Add(message);
        StateHasChanged();
    }

    private async Task StartArenaDrawTimer()
    {
        try
        {
            await RunOnTimer(this._timer, this._token, async () =>
            {
                var eventsToDraw = await GetEventsToDraw(_events, _fighters);

                try
                {
                    if (_arena.HasEnded)
                    {
                        _tokenSource.Cancel();
                    }
                    else if (_events.Count > 0 && _events.ElementAt(_events.Count - 1).EventAction == EventAction.EventsNeedToContinue && _events.Count < 500)
                    {
                        await GetArenaEvents(_arena.Id);
                        await Draw(this._context, this._canvasReference, eventsToDraw);
                    }
                    else await Draw(this._context, this._canvasReference, eventsToDraw);


                    _events.RemoveRange(0, (eventsToDraw).Count);
                }
                catch (Exception ex)
                {
                    _tokenSource.Cancel();
                }
            });
        }
        catch (Exception ex)
        {
            var doot = "";
        }
    }
}
